// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PRICE {
  CHEAP
  REGULAR
  EXPENSIVE
}

model Restaurant {
  id          Int       @id @default(autoincrement())
  name        String
  main_image  String
  images      String[]
  description String
  open_time   String
  close_time  String
  slug        String    @unique
  price       PRICE
  items       Item[]
  location_id Int
  location    Location  @relation(fields: [location_id], references: [id])
  cuisine_id  Int
  cuisine     Cuisine   @relation(fields: [cuisine_id], references: [id])
  reviews     Review[]
  bookings    Booking[]
  tables      Table[]

  created_at DateTime @default(now())
  update_at  DateTime @updatedAt
}

model Item {
  id            Int        @id @default(autoincrement())
  name          String
  price         String
  description   String
  restaurant_id Int
  restaurant    Restaurant @relation(fields: [restaurant_id], references: [id])

  created_at DateTime @default(now())
  update_at  DateTime @updatedAt
}

model Location {
  id          Int          @id @default(autoincrement())
  name        String
  created_at  DateTime     @default(now())
  update_at   DateTime     @updatedAt
  restaurants Restaurant[]
}

model Cuisine {
  id          Int          @id @default(autoincrement())
  name        String
  restaurants Restaurant[]
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt
}

model User {
  id         Int      @id @default(autoincrement())
  first_name String
  last_name  String
  email      String   @unique
  password   String
  phone      String
  city       String
  reviews    Review[]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Review {
  id            Int        @id @default(autoincrement())
  first_name    String
  last_name     String
  text          String
  rating        Float
  restaurant_id Int
  restaurant    Restaurant @relation(fields: [restaurant_id], references: [id])
  user_id       Int
  user          User       @relation(fields: [user_id], references: [id])

  created_at DateTime @default(now())
  update_at  DateTime @updatedAt
}

model Booking {
  id                Int              @id @default(autoincrement())
  number_of_people  Int
  booking_time      Int
  booker_email      String
  booker_phone      String
  booker_first_name String
  booker_last_name  String
  booker_occasion   String
  booker_request    String
  restaurant_id     Int
  restaurant        Restaurant       @relation(fields: [restaurant_id], references: [id])
  tables            BookingOnTable[]
  created_at        DateTime         @default(now())
  updated_at        DateTime         @updatedAt
}

model Table {
  id            Int              @id @default(autoincrement())
  seats         Int
  restaurant_id Int
  restaurant    Restaurant       @relation(fields: [restaurant_id], references: [id])
  bookings      BookingOnTable[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model BookingOnTable {
  table_id   Int
  table      Table   @relation(fields: [table_id], references: [id])
  booking_id Int
  booking    Booking @relation(fields: [booking_id], references: [id])

  @@id([booking_id, table_id])
}
